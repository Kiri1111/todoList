{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","features/Auth/index.tsx","app/selectors.ts","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","a","rejectWithValue","res","resultCode","errors","fieldErrors","logoutTC","_","asyncActions","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","stateDraft","action","payload","value","extraReducers","builder","addCase","fulfilled","state","actions","authReducer","reducer","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","param","changeTodolistFilterAC","index","findIndex","el","filter","entityStatus","map","tl","unshift","todolistsReducer","fetchTasksTC","thunkAPI","tasks","items","removeTaskTC","addTaskTC","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","asyncTodolistsActions","forEach","splice","todoListId","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppDispatch","useDispatch","useAction","useMemo","bindActionCreators","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","style","marginLeft","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","width","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","position","key","className","Checkbox","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTask","thunk","resultAction","rejected","errorMessage","Error","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Paper","padding","paddingTop","Button","selectIsLoggedIn","TodolistsList","useSelector","to","addTodolist","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","todolistsAsyncActions","tasksAsyncActions","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","authActions","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","err","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","selectStatus","selectIsInitialized","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.24bc1bbf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        ;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldErrors: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (data: LoginParamsType, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldErrors: res.data.fieldErrors})\r\n        }\r\n        // } catch (e: any) {\r\n        //     handleServerNetworkError(e, dispatch)\r\n        //     return {isLoggedIn: false}\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (_, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            // return thunkAPI.rejectWithValue({})\r\n        }\r\n        // } catch (error: any) {\r\n        //     handleServerNetworkError(error, dispatch)\r\n\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const asyncActions = {loginTC, logoutTC}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(stateDraft, action: PayloadAction<{ value: boolean }>) {\r\n            stateDraft.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initialization', async (_, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n    } else {\r\n        handleServerAppError(res.data, dispatch)\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeAppTC\r\n}\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todoList/fetchTodo', async (_, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        handleServerNetworkError(e as any, dispatch);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todoList/removeTodo', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        return {id: todolistId}\r\n    } catch (e) {\r\n        handleServerNetworkError(e as any, dispatch);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todoList/addTodo', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e as any, dispatch);\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todoList/changeTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e as any, dispatch);\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(el => el.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(el => el.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id != action.payload.id)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(el => el.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport let {changeTodolistFilterAC, changeTodolistEntityStatusAC,} = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    FieldErrorType,\r\n    LoginParamsType,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {AppRootStateType, ThunkError} from \"../../app/store\";\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: {\r\n    taskId: string,\r\n    todolistId: string\r\n}, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\nexport const addTaskTC = createAsyncThunk<TaskType, { title: string, todolistId: string },\r\n    ThunkError>('task/addTask', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({errors: res.data.messages, fieldErrors: res.data.fieldErrors})\r\n        }\r\n    } finally {\r\n\r\n    }\r\n    // } catch (e: any) {\r\n    //     handleServerNetworkError(e, dispatch)\r\n    //     return rejectWithValue(null)\r\n    // }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('task/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    getState,\r\n    rejectWithValue\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    }\r\n        // catch (error: any) {\r\n        //     handleServerNetworkError(error, dispatch);\r\n        //     return rejectWithValue(null)\r\n        // }\r\n    finally {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasksTC,\r\n    removeTaskTC,\r\n    addTaskTC,\r\n    updateTaskTC\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => state[tl.id] = [])\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(el => el.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            tasks.unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(el => el.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {ActionCreatorsMapObject, bindActionCreators, combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Auth/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useMemo} from \"react\";\r\nimport {FieldErrorType} from \"../api/todolists-api\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n//// хук для замены dispatch\r\n\r\nexport function useAction<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n    return boundActions\r\n}\r\n\r\n//type error\r\n\r\nexport type ThunkError = { rejectValue: { errors: Array<string>, fieldErrors?: Array<FieldErrorType> } }","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => Promise<any>\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            try {\r\n                await addItem(title);\r\n                setTitle(\"\");\r\n            } catch (e) {\r\n\r\n            }\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton style={{marginLeft: '5px'}} color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span style={{width: '100px'}} onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useAction} from \"../../../../app/store\";\r\nimport {tasksActions} from \"../../index\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {removeTaskTC, updateTaskTC} = useAction(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTaskTC({\r\n        taskId: props.task.id,\r\n        todolistId: props.todolistId\r\n    }), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        updateTaskTC({\r\n            taskId: props.task.id,\r\n            domainModel: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTaskTC({taskId: props.task.id, domainModel: {title: newValue}, todolistId: props.todolistId})\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div style={{position: 'relative'}} key={props.task.id}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton style={{position: 'absolute', top: '2px', right: '2px'}} onClick={onClickHandler}>\r\n            <Delete fontSize={\"small\"}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {TodolistDomainType} from '../todolists-reducer'\r\nimport {useAction, useAppDispatch} from \"../../../app/store\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const {changeTodolistFilterAC, changeTodolistTitleTC, removeTodolistTC} = useAction(todolistsActions)\r\n    const {fetchTasksTC} = useAction(tasksActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasksTC(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTask = useCallback(async (title: string) => {\r\n        let thunk = tasksActions.addTaskTC({title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTaskTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.fieldErrors?.length) {\r\n                const errorMessage = resultAction.payload?.fieldErrors[0]\r\n                throw new Error(errorMessage.error)\r\n            } else {\r\n                throw new Error('')\r\n            }\r\n        }\r\n    }, [tasksActions.addTaskTC, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeTodolistFilterAC({\r\n        filter: 'all',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => changeTodolistFilterAC({\r\n        filter: 'active',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => changeTodolistFilterAC({\r\n        filter: 'completed',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton style={{position: 'absolute', right: '5px', top: '5px'}} onClick={removeTodolist}\r\n                    disabled={props.todolist.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'gray'}}>Add first task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAction} from '../../app/store'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistsActions} from \"./index\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {addTodolistTC, fetchTodolistsTC} = useAction(todolistsActions)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    const addTodolist = async (title: string) => {\r\n        addTodolistTC(title)\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as tasksAsyncActions} from './tasks-reducer'\r\nimport {asyncActions as todolistsAsyncActions} from './todolists-reducer'\r\nimport {slice} from \"./todolists-reducer\";\r\nimport {TodolistsList} from \"./TodolistsList\";\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions\r\n}\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {useAction, useAppDispatch} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n    const {} = useAction(authActions)\r\n\r\n    type FormValues = {\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValues>) => {\r\n            const action = await dispatch(authActions.loginTC(values));\r\n            if (authActions.loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldErrors) {\r\n                    const err = action.payload?.fieldErrors[0]\r\n                    formikHelpers.setFieldError(err.field, err.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"todoList\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer';\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions\r\n\r\n}","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {asyncActions} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Auth'\r\nimport {logoutTC} from '../features/Auth/auth-reducer'\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport {authSelectors} from \"../features/Auth\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncActions.initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        {/*<Typography variant=\"h6\">*/}\r\n                        {/*    News*/}\r\n                        {/*</Typography>*/}\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/todoList'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nconst rerenderEntireTree = () => {\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>, document.getElementById('root'));\r\n\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderEntireTree()\r\n    })\r\n    module.hot.accept('./app/store', () => {\r\n        rerenderEntireTree()\r\n    })\r\n}"],"sourceRoot":""}